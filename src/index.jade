doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Build apps, not infrastructure

    link(rel='stylesheet', type='text/css', href='build/build.css')

    style.
      .riker-grin {
        background-image: url('images/riker-grin.jpg');
      }
      .picard-wtf {
        background-image: url('images/picard-wtf.jpg');
      }

  body

    article

      section
        h1 Build apps, not infrastructure
        br
        div.me.round
        h3
          a(href="http://twitter.com/jschementi") Jimmy Schementi
        p @jschementi

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h3.bullet Have you ever...
        div
          h2 Changed code
          h3 directly in
          h2 production?
        br
        pre
          code.language-javascript.
            $ ssh myapp-prod-box
            $ vi /app/server.js
        //div.bullet(style="position: absolute; bottom: 0; text-align: center; left: 0; right: 0;")
          img(src="images/coding-horror.png")

      section
        img(src="images/wolf.jpg")

      section
        img(src="images/cowboy-coding.jpg")
        br
        a(style="font-size: 12px" href="http://www.bnj.com/blog/cowboy-coding-pink-sombrero")
          | http://www.bnj.com/blog/cowboy-coding-pink-sombrero

      section.light-bg(data-bespoke-backdrop='light-bg')
        img(src="images/automate-all-the-things.png")

      //section
        h3 Automation is
        h2 what we do

      section
        h2.bullet
          span Application
          span.bullet.italic &nbsp;(feature)
        h3 vs.
        h2
          span Infrastructure
          span.bullet.italic &nbsp;(chore)

      section
        img(src="images/bullshit.jpg")

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Prioritizing
        h2 infrastructure
        h3 makes it easier to
        h2 ship features

      section
        img(src="images/bad-time.jpg" style="width: 75%;")

      // section
        h3 Talk probably should have been titled
        h2 Get your infrastructure right 
        h2 So you don't have to worry about it

      section
        h3 Think of
        h2 infrastructure
        h3 as a
        h2 product
        h3 you provide to
        h2 yourself

      section
        h2 Features
        br
        ul.bullet
          li Deploy a brand new app to new servers
          li Deploy existing app
          li Scale an app
          li Spin up a brand new environment
          li All automated
          li Doesn't make you broke

      // You don't have to have everything from day 1 - but have a good idea about how you’re going to get there, and plan to get there.
      // Seriously, don’t wait until you need to scale. That’s hell.
      // And don’t be afraid to scale. That will kill your product/company.

      section.light-bg(data-bespoke-backdrop='light-bg')
        img(src="images/heroku-logo.jpg" style="width:30%")
        pre
          code.language-javascript.
            $ git push heroku master
        pre.tiny-code
          code.language-javascript.
            ...
            -----&gt; Node.js app detected
            ...
            -----&gt; Launching... done

      //section
        h3.bullet the
        h2 Platform
        h3 as a
        h2 Service
        br
        ul
          li Extremely simple to deploy
          li Buildpacks auto-detects the application type
          li Custom buildpacks can deploy any application type
          li Very expensive (lowest is $34.50/month)
          li Very little control

      // Infrastructure features:
      // Virtual machines (duh)
      // CI
      // Automated deployments
      // Scaling
      // Zero-downtime
      // Rollback/Versioning
      // Monitoring
      // Backups
      // Project-specific tools (grunt/gulp/Makefile, lint, minify, static analysis, build, testing)

      section.light-bg(data-bespoke-backdrop='light-bg')
        img(src="images/docker.png" style="width:30%")
        br
        h2 Application
        h2 Containers
        br
        h3 Isolated the application’s view of the OS

      // their own process ID space, filesystem, and network interfaces, constrained resources

      section
        h2 Dockerfile
        pre
          code.language-javascript.
            FROM    centos:centos6

            RUN     yum install -y npm

            COPY . /src
            RUN cd /src; npm install

            EXPOSE  8080
            CMD ["node", "/src/index.js"]

      //    Dockerfile defines how app is deployed from scratch
      //    You can run the same docker container in production and development.

      section.light-bg(data-bespoke-backdrop='light-bg')
        img(src="images/aws.png" style="width: 70%")

      section.light-bg(data-bespoke-backdrop='light-bg')
        img(src="images/AWS_Management_Console.png" style="width: 72%")

      // “The” compute cloud - EC2
      // Auto-scaling and load balancing built-in
      // “The” storage in the cloud - S3
      // “The" CDN - CloudFront
      // Beanstalk - Heroku for AWS
      // Overall OK. Except for the crazy bad environments the have by default.
      // Docker support changes all this
      // Handles configuration of auto-scaling and DNS for you.
      // Handles rolling deployments (update n instances or m% of instances at any time)
      // Tons of other services, data storage, private networks, DNS, app services, mobile services, deployment stuff, oh my!
      // And they overlap! OpsWorks, Beanstalk, and CloudFormation, for example. Or complete with Open Source offerings (all the databases, for example)
      // CodeDeploy manages applications and how to deploy them (again, overlap with Beanstalk, but more general)
      // EC2 Container Service supports clustering of Docker containers
      // Lambda - respond to events with code. 

      section.light-bg(data-bespoke-backdrop='light-bg')
        img(src="images/docean.svg")

      // DigitalOcean
      // Basically the EC2+Route53 portion of AWS
      // Awesome UI for both API and website
      // A NYC data center, hellz yeah
      // Any load balancing needs to be done with another dedicated droplet (HAProxy maybe?), and scaling either manually or with another auto-scaling system (more about the later).

      // Flynn/Deis
      // Open Source PaaS for you to run yourself
      // Deis requires CoreOS, Flynn runs on anything (technically only Ubuntu 14.04)

      //section
        h2 StatsD/Graphite
        br
        img(src="images/graphite.png" style="width: 70%")

      // StatsD/Graphite
      // System monitoring and graphing
      // Round-robin database
      // A real pain to setup

      //section
        h2 Jenkins
        img(src="images/jenkins.png" style="width: 45%")

      // CI &amp; CD
      // Tons of options. All good and bad.
      // I use Jenkins
      // Open source (but, Java)
      // Just a scheduling system - plugins can make it special, or just use custom scripts
      // It schedules everything that the system doesn’t depend on.
      // Can use Janky and HuBot for better UI, but whatever.

      // Holy fuck, that’s a lot! How does it help us make an infrastructure that we don’t have to worry about so much!!

      section
        h3 Feels like something's missing...

      section(data-bespoke-backdrop='riker-grin')
        div.pin.top
          h2 Riker
          h3 Heroku-like application deployments for Amazon Web Services.

      section(data-bespoke-backdrop='picard-wtf')
        h3(style="padding-left: 40%") You're the captain, make Riker your #1

      section
        pre.bullet
          code.language-javascript.
            $ pip install riker

          code.language-javascript.bullet.
            $ riker config

          code.language-javascript.bullet.
            $ git clone git@github.com:heroku/node-js-sample.git

          code.language-javascript.bullet.
            $ cd node-js-sample

          code.language-javascript.bullet.
            $ riker deploy

          code.language-javascript.bullet.
            $ riker open

      section
        h2.bullet Deploy apps
        h3 written in any
        h2 programming
        h2 language
        br
        h3.bullet (uses Heroku Buildpacks)

      section
        h2 Deploy a static website
        h2 to S3

        pre
          code.language-javascript.bullet.
            $ mkdir static-website &amp;&amp; cd static-website

          code.language-javascript.bullet.
            $ echo "Hello, World" &gt; index.html

          code.language-javascript.bullet.
            $ touch .s3 # tells Riker to deploy to Amazon S3

          code.language-javascript.bullet.
            $ git init &amp;&amp; git add -A &amp;&amp; git commit -m "Initial commit"

          code.language-javascript.bullet.
            $ riker deploy

          code.language-javascript.bullet.
            $ riker open

      section
        h2 Production mode
        br
        ul.bullet
          li Auto-scaling
          li Rolling deployment

      section
        h2 Future
        br
        ul.bullet
          li Support more clouds (eg. DigitalOcean) through adapters
          li Dockerfile support
          li Use more of AWS (beanstalk, codedeploy, etc)

      section
        p(style="font-size: 2em")
          a(href="https://github.com/jschementi/riker") github.com/jschementi/riker 

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Codequak
        h3 Build awesome stuff

      section
        h1 Thanks!
        br
        div.me.round
        h3 @jschementi

      //section
        h2 Leaf
        br
        img(src="images/leaf.jpg" style="width: 15em")

    script(src='build/build.js')
